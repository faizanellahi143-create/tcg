import React, { useState } from 'react';
import { X, FileText, Image, Printer, Code, Download, Copy, Camera } from 'lucide-react';
import { DeckCard } from '../types/card';
import html2canvas from 'html2canvas';

interface ExportDeckModalProps {
  deck: DeckCard[];
  deckName: string;
  onClose: () => void;
}

export const ExportDeckModal: React.FC<ExportDeckModalProps> = ({
  deck,
  deckName,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState<'import' | 'export'>('export');
  const [importMethod, setImportMethod] = useState<'text' | 'code' | 'image'>('text');
  const [exportMethod, setExportMethod] = useState<'text' | 'image' | 'print' | 'code' | 'tabletop'>('text');
  const [importText, setImportText] = useState('');

  const generateDeckText = () => {
    const header = `// ${deckName}\n// Generated by Mobile Suit TCG Club\n\n`;
    const deckList = deck.map(card => `${card.quantity} ${card.name} (${card.id})`).join('\n');
    return header + deckList;
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
  };

  const exportAsImage = async () => {
    const deckElement = document.getElementById('deck-display');
    if (deckElement) {
      try {
        const canvas = await html2canvas(deckElement);
        const link = document.createElement('a');
        link.download = `${deckName.replace(/\s+/g, '_')}_deck.png`;
        link.href = canvas.toDataURL();
        link.click();
      } catch (err) {
        console.error('Failed to export image: ', err);
        alert('Failed to export image. Please try again.');
      }
    }
  };

  const handleImageImport = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        alert('Image import feature coming soon! This will use AI to recognize cards from photos.');
      }
    };
    input.click();
  };

  const importOptions = [
    { id: 'text', label: 'Text', icon: FileText },
    { id: 'code', label: 'Code', icon: Code },
    { id: 'image', label: 'Image', icon: Camera }
  ];

  const exportOptions = [
    { id: 'text', label: 'Text', icon: FileText },
    { id: 'image', label: 'Image Export', icon: Image },
    { id: 'print', label: 'Print', icon: Printer },
    { id: 'code', label: 'Code', icon: Code },
    { id: 'tabletop', label: 'TableTopSim', icon: Download }
  ];

  return (
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-50">
      <div className="bg-slate-900 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-slate-900 border-b border-slate-700 px-6 py-4 flex items-center justify-between">
          <h2 className="text-xl font-bold text-white">Import/Export Deck</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        <div className="p-6">
          {/* Tab Navigation */}
          <div className="flex gap-2 mb-6">
            <button
              onClick={() => setActiveTab('import')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === 'import'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
              }`}
            >
              Import
            </button>
            <button
              onClick={() => setActiveTab('export')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === 'export'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
              }`}
            >
              Export
            </button>
          </div>

          {activeTab === 'import' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-white font-semibold mb-3">Import Method</h3>
                <div className="grid grid-cols-3 gap-2">
                  {importOptions.map((option) => {
                    const Icon = option.icon;
                    return (
                      <button
                        key={option.id}
                        onClick={() => setImportMethod(option.id as any)}
                        className={`flex items-center gap-2 p-3 rounded-lg transition-colors ${
                          importMethod === option.id
                            ? 'bg-blue-600 text-white'
                            : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
                        }`}
                      >
                        <Icon size={16} />
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>

              {importMethod === 'text' && (
                <div>
                  <label className="text-white font-medium mb-2 block">Paste Deck List</label>
                  <textarea
                    value={importText}
                    onChange={(e) => setImportText(e.target.value)}
                    placeholder="Paste your deck list here..."
                    className="w-full h-40 bg-slate-800 text-white p-3 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  />
                  <button className="mt-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors">
                    Import Deck
                  </button>
                </div>
              )}

              {importMethod === 'image' && (
                <div className="text-center py-8">
                  <Camera className="mx-auto mb-4 text-gray-400" size={48} />
                  <h3 className="text-white font-medium mb-2">Import from Photo</h3>
                  <p className="text-gray-400 mb-4">Upload a photo of your cards and we'll recognize them using AI</p>
                  <button
                    onClick={handleImageImport}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
                  >
                    Choose Image
                  </button>
                </div>
              )}

              {importMethod === 'code' && (
                <div className="text-center py-8">
                  <Code className="mx-auto mb-4 text-gray-400" size={48} />
                  <h3 className="text-white font-medium mb-2">Import from Code</h3>
                  <p className="text-gray-400">Feature coming soon - import decks using deck codes</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'export' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-white font-semibold mb-3">Export Method</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {exportOptions.map((option) => {
                    const Icon = option.icon;
                    return (
                      <button
                        key={option.id}
                        onClick={() => setExportMethod(option.id as any)}
                        className={`flex items-center gap-2 p-3 rounded-lg transition-colors ${
                          exportMethod === option.id
                            ? 'bg-green-600 text-white'
                            : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
                        }`}
                      >
                        <Icon size={16} />
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>

              {exportMethod === 'text' && (
                <div>
                  <label className="text-white font-medium mb-2 block">Deck List</label>
                  <textarea
                    value={generateDeckText()}
                    readOnly
                    className="w-full h-40 bg-slate-800 text-white p-3 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  />
                  <button
                    onClick={() => copyToClipboard(generateDeckText())}
                    className="mt-2 flex items-center gap-2 bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded-lg transition-colors"
                  >
                    <Copy size={16} />
                    Copy to Clipboard
                  </button>
                </div>
              )}

              {exportMethod === 'image' && (
                <div className="text-center py-8">
                  <Image className="mx-auto mb-4 text-gray-400" size={48} />
                  <h3 className="text-white font-medium mb-2">Export as Image</h3>
                  <p className="text-gray-400 mb-4">Generate a visual representation of your deck</p>
                  <button
                    onClick={exportAsImage}
                    className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors"
                  >
                    Generate Image
                  </button>
                </div>
              )}

              {exportMethod === 'print' && (
                <div className="text-center py-8">
                  <Printer className="mx-auto mb-4 text-gray-400" size={48} />
                  <h3 className="text-white font-medium mb-2">Print Deck</h3>
                  <p className="text-gray-400 mb-4">Generate a printer-friendly version of your deck</p>
                  <button
                    onClick={() => window.print()}
                    className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors"
                  >
                    Print Deck
                  </button>
                </div>
              )}

              {(exportMethod === 'code' || exportMethod === 'tabletop') && (
                <div className="text-center py-8">
                  <Code className="mx-auto mb-4 text-gray-400" size={48} />
                  <h3 className="text-white font-medium mb-2">
                    {exportMethod === 'code' ? 'Export Code' : 'TableTop Simulator'}
                  </h3>
                  <p className="text-gray-400">Feature coming soon</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};